pio.PortType.examples = 样本
pio.PortType.example_set = 样本集
pio.PortType.example_set_input = 样本集输入
pio.PortType.example_set_output = 样本集输出
pio.PortType.original = 原始样本集
pio.PortType.training_examples = 训练样本集
pio.PortType.unmatched_example_set = 未匹配的样本集
pio.PortType.item_sets = 项集
pio.PortType.frequent_sets = 频繁项集
pio.PortType.cluster_set = 簇集
pio.PortType.training_set = 训练集
pio.PortType.rules = 规则
pio.PortType.model = 模型
pio.PortType.cluster_model = 簇模型
pio.PortType.preprocessing_model = 预处理模型
pio.PortType.model_input = 模型输入
pio.PortType.model_output = 模型输出
pio.PortType.original_model_output = 原始模型输出
pio.PortType.labelled_data = 标记的数据
pio.PortType.unlabelled_data = 未标记的数据
pio.PortType.performance = 性能
pio.PortType.estimated_performance = 性能评估
pio.PortType.through = 穿过
pio.PortType.start = 开始
pio.PortType.end = 结束
pio.PortType.weights = 权重
pio.PortType.output = 输出
pio.PortType.file = 文件

pio.OperatorGroup.source=数据源
pio.OperatorGroup.processing=数据处理
pio.OperatorGroup.algorithmModel=算法建模

#processing operator
pio.DatabaseDataReader.name=读取数据库
pio.DatabaseDataReader.description=读取数据库
pio.DatabaseDataReader.connect.url=数据库连接
pio.DatabaseDataReader.connect.username=用户名
pio.DatabaseDataReader.connect.password=密码
pio.DatabaseDataReader.query=查询语句

pio.SingleViewExampleSource.name=读取单图
pio.SingleViewExampleSource.description=读取单图
pio.SingleViewExampleSource.url=数据源URL
pio.SingleViewExampleSource.data_source=数据源
pio.SingleViewExampleSource.single_view_data_source=单图

pio.HttpSqlExampleSource.name=读取SQL
pio.HttpSqlExampleSource.description=读取SQL
pio.HttpSqlExampleSource.url=SQL数据源URL
pio.HttpSqlExampleSource.sql=SQL查询语句

pio.CSVExampleSource.name=读取CSV文件
pio.CSVExampleSource.description=读取CSV文件
pio.CSVExampleSource.csv_file=CSV文件
pio.CSVExampleSource.column_separators=列分隔符
pio.CSVExampleSource.trim_lines=去首尾空行
pio.CSVExampleSource.use_quotes=使用引号
pio.CSVExampleSource.quotes_character=引号字符
pio.CSVExampleSource.escape_character=转义字符
pio.CSVExampleSource.skip_comments=跳过注释
pio.CSVExampleSource.comment_characters=注释字符

pio.Normalization.name=标准化
pio.Normalization.description=标准化
pio.Normalization.method=选择标准化方法

pio.PreprocessingOperator.return_preprocessing_model = 预处理模型是否返回
pio.PreprocessingOperator.create_view = 创建视图（数据不会更改）

pio.AttributeSubsetSelector.attribute_filter_type = 属性过滤类型
pio.AttributeSubsetSelector.invert_selection = 反向选择
pio.AttributeSubsetSelector.include_special_attributes = 包含指定属性

pio.BlockTypeAttributeFilter.block_type = 属性的块类型
pio.BlockTypeAttributeFilter.use_block_type_exception = 使用块类型异常
pio.BlockTypeAttributeFilter.except_block_type = 排除此块类型
pio.NumericValueAttributeFilter.numeric_condition = 数值条件（如：'>= 5'）
pio.RegexpAttributeFilter.regular_expression = 正则表达式
pio.RegexpAttributeFilter.use_except_expression = 使用异常表达式
pio.RegexpAttributeFilter.except_regular_expression = 排除正则表达式
pio.SingleAttributeFilter.attribute = 选择属性
pio.ValueTypeAttributeFilter.value_type = 属性值类型
pio.ValueTypeAttributeFilter.use_value_type_exception = 使用值类型异常
pio.ValueTypeAttributeFilter.except_value_type = 排除此值类型

pio.RangeNormalizationMethod.min = 标准化后的最小值
pio.RangeNormalizationMethod.max = 标准化后的最大值

pio.ModelApplier.name=模型应用
pio.ModelApplier.description=模型应用
pio.ModelApplier.application_parameters=应用参数
pio.ModelApplier.key=参数键
pio.ModelApplier.value=参数值
pio.ModelApplier.create_view=创建视图

pio.AttributeFilter.name=选择维度
pio.AttributeFilter.description=选择维度
pio.AttributeFilter.subset.attributes=维度

pio.ExampleFilter.name=条件过滤
pio.ExampleFilter.description=条件过滤
pio.ExampleFilter.filters_list=过滤条件
pio.ExampleFilter.filters_logic_and=同时满足所有条件

pio.ChangeAttributeRole.name=设置角色
pio.ChangeAttributeRole.description=设置角色
pio.ChangeAttributeRole.attribute_name=维度名
pio.ChangeAttributeRole.target_role=角色
pio.ChangeAttributeRole.set_additional_roles=设置其他角色

#algorithmModel operator
pio.LinearRegression.name=线性回归
pio.LinearRegression.description=线性回归
pio.LinearRegression.feature_selection=特征选择
pio.LinearRegression.min_tolerance=最小公差
pio.LinearRegression.eliminate_colinear_features=消除共线特征
pio.LinearRegression.use_bias=使用偏置
pio.LinearRegression.ridge=脊

pio.TTestLinearRegressionMethod.alpha = t检验的显著水平&alpha;
pio.IterativeTTestLinearRegressionMethod.max_iterations = 最大迭代次数
pio.IterativeTTestLinearRegressionMethod.forward_alpha = t检验选择属性的显著水平
pio.IterativeTTestLinearRegressionMethod.backward_alpha = t检验取消选择属性的显著水平

#pio.LogisticRegression.name=逻辑回归
#pio.LogisticRegression.description=逻辑回归
#pio.LogisticRegression.add_intercept= 包含截距
#pio.LogisticRegression.start_population_type=开始群体类型
#pio.LogisticRegression.max_generations=最大迭代
#pio.LogisticRegression.generations_without_improval=没有迭代提升
#pio.LogisticRegression.population_size=群体大小
#pio.LogisticRegression.tournament_fraction=得分
#pio.LogisticRegression.keep_best=确保最优值
#pio.LogisticRegression.mutation_type=变异类型
#pio.LogisticRegression.selection_type=选择类型
#pio.LogisticRegression.crossover_prob=步进概率
#pio.LogisticRegression.show_convergence_plot=分类图
#pio.LogisticRegression.return_model_performance=返回模型评估指标

pio.ParallelDecisionTreeLearner.name=决策树
pio.ParallelDecisionTreeLearner.description=决策树
pio.ParallelDecisionTreeLearner.criterion=判决方法
pio.ParallelDecisionTreeLearner.maximal_depth=最大深度
pio.ParallelDecisionTreeLearner.apply_pruning=剪枝
pio.ParallelDecisionTreeLearner.confidence=置信度
pio.ParallelDecisionTreeLearner.apply_prepruning=预剪枝
pio.ParallelDecisionTreeLearner.minimal_gain=最小信息增益
pio.ParallelDecisionTreeLearner.minimal_leaf_size=最小叶子树
pio.ParallelDecisionTreeLearner.minimal_size_for_split=最小分割大小
pio.ParallelDecisionTreeLearner.number_of_prepruning_alternatives=可选的预剪枝数

pio.ParallelRandomForestLearner.name = 随机森林
pio.ParallelRandomForestLearner.description = 随机森林
pio.ParallelRandomForestLearner.number_of_trees = 树个数
pio.ParallelRandomForestLearner.guess_subset_ratio = 猜测子集比例
pio.ParallelRandomForestLearner.subset_ratio = 随机选择子集的比例
pio.ParallelRandomForestLearner.voting_strategy = 投票策略

pio.DecisionTreeLearner.maximal_depth=最大深度
pio.DecisionTreeLearner.confidence=置信度
pio.DecisionTreeLearner.number_of_prepruning_alternatives=预剪枝可选的节点数
pio.DecisionTreeLearner.no_pre_pruning=禁止预剪枝
pio.DecisionTreeLearner.no_pruning=禁止修剪

pio.DistanceMeasures.measure_types = 度量类型
pio.DistanceMeasures.nominal_measure = 标称度量
pio.DistanceMeasures.numerical_measure = 数值度量
pio.DistanceMeasures.mixed_measure = 混合度量
pio.DistanceMeasures.divergence = 散度
pio.KMeans.name = K均值
pio.KMeans.description = K均值
pio.KMeans.k = 簇个数
pio.KMeans.max_runs = 最大运行次数
pio.KMeans.max_optimization_steps = 最大优化次数
pio.KMeanspp.determine_good_start_values = 使用启发式初始质心
pio.RMAbstractClusterer.add_cluster_attribute = 添加簇属性
pio.RMAbstractClusterer.add_as_label = 添加为标签
pio.RMAbstractClusterer.remove_unlabeled = 删除未标记的结果集

pio.MyKLRLearner.name = 逻辑回归
pio.MyKLRLearner.description = 逻辑回归

pio.JMySVMLearner.name = 支持向量机
pio.JMySVMLearner.description = 支持向量机
pio.JMySVMLearner.estimate_performance = 返回性能估计
pio.JMySVMLearner.L_pos = 正实例复杂度因子
pio.JMySVMLearner.L_neg = 负实例复杂度因子
pio.JMySVMLearner.epsilon = 不敏感常数&epsilon;
pio.JMySVMLearner.epsilon_plus = &epsilon;正偏差
pio.JMySVMLearner.epsilon_minus = &epsilon;负偏差
pio.JMySVMLearner.balance_cost = 均衡开销
pio.JMySVMLearner.quadratic_loss_pos = 正偏差使用二次损失
pio.JMySVMLearner.quadratic_loss_neg = 负偏差使用二次损失

pio.AbstractMySVMLearner.kernel_gamma = 核参数&gamma;
pio.AbstractMySVMLearner.kernel_sigma1 = 核参数&sigma;1
pio.AbstractMySVMLearner.kernel_sigma2 = 核参数&sigma;2
pio.AbstractMySVMLearner.kernel_sigma3 = 核参数&sigma;3
pio.AbstractMySVMLearner.kernel_shift = 核参数Shift
pio.AbstractMySVMLearner.kernel_degree = 核参数Degree
pio.AbstractMySVMLearner.kernel_a = 核参数a
pio.AbstractMySVMLearner.kernel_b = 核参数b
pio.AbstractMySVMLearner.kernel_cache = 核估计缓存大小
pio.AbstractMySVMLearner.convergence_epsilon = KKT条件精度
pio.AbstractMySVMLearner.max_iterations = 最大迭代次数
pio.AbstractMySVMLearner.scale = 缩放
#pio.AbstractMySVMLearner.return_optimization_performance =
pio.AbstractMySVMLearner.C = C
pio.AbstractMySVMLearner.kernel_type = 核类型
pio.AbstractMySVMLearner.calculate_weights = 计算权重

pio.PolynominalClassificationPerformanceEvaluator.name = 分类评估
pio.PolynominalClassificationPerformanceEvaluator.description = 分类评估
pio.PolynominalClassificationPerformanceEvaluator.class_weights = 类权重
pio.PolynominalClassificationPerformanceEvaluator.class_name = 类名
pio.PolynominalClassificationPerformanceEvaluator.weight = 该类的权重
pio.AbsoluteError.absolute_error = 绝对误差
pio.RelativeError.relative_error = 相对误差
pio.LenientRelativeError.relative_error_lenient = 平均宽松相对误差
pio.StrictRelativeError.relative_error_strict = 平均严格相对误差
pio.NormalizedAbsoluteError.normalized_absolute_error = 归一化绝对误差
pio.RootMeanSquaredError.root_mean_squared_error = 均方根误差
pio.RootRelativeSquaredError.root_relative_squared_error = 根相对平方误差
pio.SquaredError.squared_error = 平方误差
pio.CorrelationCriterion.correlation = 相关性
pio.SquaredCorrelationCriterion.squared_correlation = 平方相关性
pio.CrossEntropy.cross_entropy = 交叉熵
pio.Margin.margin = 分类器边缘
pio.SoftMarginLoss.soft_margin_loss = 平均软边缘损耗
pio.LogisticLoss.logistic_loss = 逻辑损耗
pio.MultiClassificationPerformance.name1 = 精度
pio.MultiClassificationPerformance.name2 = 分类误差
pio.MultiClassificationPerformance.name3 = &kappa;
pio.MultiClassificationPerformance.description1 = 正确分类样本的相对数量
pio.MultiClassificationPerformance.description2 = 错误分类样本的相对数量
pio.MultiClassificationPerformance.description3 = 分类的&kappa;统计
pio.WeightedMultiClassPerformance.name1 = 加权平均召回
pio.WeightedMultiClassPerformance.name2 = 加权平均精度
pio.WeightedMultiClassPerformance.description1 = 每类召回的加权平均数
pio.WeightedMultiClassPerformance.description2 = 每类精度的加权平均数
pio.RankCorrelation.description1 = 实际和预测标签之间的等级相关性（Spearman's rho）
pio.RankCorrelation.description2 = 实际和预测标签之间的等级相关性（Kendall's tau-b）

pio.RegressionPerformanceEvaluator.name = 回归评估
pio.RegressionPerformanceEvaluator.description = 回归评估
pio.PredictionAverage.prediction_average = 平均预测

pio.BinominalClassificationPerformanceEvaluator.name = 二项分类评估
pio.BinominalClassificationPerformanceEvaluator.description = 二项分类评估

pio.AbstractPerformanceEvaluator.main_criterion = 主要标准
pio.AbstractPerformanceEvaluator.skip_undefined_labels = 跳过未定义的标签
pio.AbstractPerformanceEvaluator.comparator_class = 比较器全类名
pio.AbstractPerformanceEvaluator.use_example_weights = 使用实例权重

pio.FPGrowth.name = FP-Growth
pio.FPGrowth.description = FP-Growth
pio.FPGrowth.find_min_number_of_itemsets = 查找最小数量项集
pio.FPGrowth.min_number_of_itemsets = 最小数量项集
pio.FPGrowth.max_number_of_retries = 最大重试次数
pio.FPGrowth.positive_value = 正值
pio.FPGrowth.min_support = 最小支持度
pio.FPGrowth.max_items = 项集最大长度
pio.FPGrowth.must_contain = 生成的规则必须包含为正则表达式
pio.FPGrowth.keep_example_set = 保留样本集

pio.AssociationRuleGenerator.name = 创建关联规则
pio.AssociationRuleGenerator.description = 创建关联规则
pio.AssociationRuleGenerator.criterion = 规则选择准则
pio.AssociationRuleGenerator.min_confidence = 最小置信度
pio.AssociationRuleGenerator.min_criterion_value = 所选准则最小值
pio.AssociationRuleGenerator.gain_theta = 增益参数&theta;
pio.AssociationRuleGenerator.laplace_k = 拉普拉斯参数&kappa;

pio.SamplingOperator.name = 随机抽样
pio.SamplingOperator.description = 随机抽样
pio.SamplingOperator.sample = 样本抽取方式
pio.SamplingOperator.sample_size = 样本大小
pio.SamplingOperator.sample_ratio = 样本比例
pio.SamplingOperator.sample_probability = 样本概率
pio.SamplingOperator.balance_data = 平衡数据
pio.SamplingOperator.sample_size_per_class = 每类绝对大小
pio.SamplingOperator.sample_ratio_per_class = 每类比例
pio.SamplingOperator.sample_probability_per_class = 每类概率
pio.SamplingOperator.class = 类名
pio.SamplingOperator.size = 数量
pio.SamplingOperator.ratio = 比例
pio.SamplingOperator.probability = 概率

pio.AggregationOperator.name = 聚合
pio.AggregationOperator.description = 聚合
pio.AggregationOperator.use_default_aggregation = 使用默认的聚合函数
pio.AggregationOperator.default_aggregation_function = 默认的聚合函数
pio.AggregationOperator.aggregation_attributes = 聚合属性
pio.AggregationOperator.aggregation_functions = 聚合函数
pio.AggregationOperator.group_by_attributes = 分组属性
pio.AggregationOperator.only_distinct = 仅使用不同值的行
pio.AggregationOperator.ignore_missings = 忽略缺失值
pio.AggregationOperator.count_all_combinations = 计算所有组合

pio.NumericToBinominal.name = 数值转二项
pio.NumericToBinominal.description = 数值转二项
pio.NumericToBinominal.min = 映射到false的最小值
pio.NumericToBinominal.max = 映射到false的最大值
pio.NumericToPolynominal.name = 数值转多项
pio.NumericToPolynominal.description = 数值转多项