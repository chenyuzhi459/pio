pio.ProcessType.drain_training = 流失训练
pio.ProcessType.drain_prediction = 流失预测

pio.Operator.clone_suffix = _副本

pio.PortName.examples = 样本
pio.PortName.example_set = 样本集
pio.PortName.example_set_input = 样本集输入
pio.PortName.example_set_output = 样本集输出
pio.PortName.remained_example_set_output = 剩余样本集输出
pio.PortName.original = 原始样本集
pio.PortName.training_examples = 训练样本集
pio.PortName.unmatched_example_set = 未匹配的样本集
pio.PortName.item_sets = 项集
pio.PortName.frequent_sets = 频繁项集
pio.PortName.cluster_set = 簇集
pio.PortName.training_set = 训练集
pio.PortName.rules = 规则
pio.PortName.model = 模型
pio.PortName.cluster_model = 簇模型
pio.PortName.preprocessing_model = 预处理模型
pio.PortName.model_input = 模型输入
pio.PortName.model_output = 模型输出
pio.PortName.original_model_output = 原始模型输出
pio.PortName.labelled_data = 标记的数据
pio.PortName.unlabelled_data = 未标记的数据
pio.PortName.performance = 性能
pio.PortName.estimated_performance = 性能评估
pio.PortName.through = 穿过
pio.PortName.start = 开始
pio.PortName.end = 结束
pio.PortName.weights = 权重
pio.PortName.input = 输入
pio.PortName.output = 输出
pio.PortName.file = 文件
pio.PortName.vector = 向量

pio.Ontology.value_type_names.attribute_value = 属性值
pio.Ontology.value_type_names.nominal = 标称
pio.Ontology.value_type_names.numeric = 数值
pio.Ontology.value_type_names.integer = 整型
pio.Ontology.value_type_names.real = 实数型
pio.Ontology.value_type_names.text = 文本
pio.Ontology.value_type_names.binominal = 二项
pio.Ontology.value_type_names.polynominal = 多项
pio.Ontology.value_type_names.file_path = 文件路径
pio.Ontology.value_type_names.date_time = 日期时间
pio.Ontology.value_type_names.date = 日期
pio.Ontology.value_type_names.time = 时间
pio.Ontology.block_type_names.attribute_block = 属性块
pio.Ontology.block_type_names.single_value = 单值
pio.Ontology.block_type_names.value_series = 值序列
pio.Ontology.block_type_names.value_series_start = 起始值序列
pio.Ontology.block_type_names.value_series_end = 结束值序列
pio.Ontology.block_type_names.value_matrix = 值矩阵
pio.Ontology.block_type_names.value_matrix_start = 起始值矩阵
pio.Ontology.block_type_names.value_matrix_end = 结束值矩阵
pio.Ontology.block_type_names.value_matrix_row_start = 值矩阵起始行

pio.Attributes.known_attribute_types.confidence = 置信变量
pio.Attributes.known_attribute_types.label = 目标变量
pio.Attributes.known_attribute_types.id = 唯一标识
pio.Attributes.known_attribute_types.prediction = 预测变量
pio.Attributes.known_attribute_types.attribute = 属性
pio.Attributes.known_attribute_types.outlier = 离群变量
pio.Attributes.known_attribute_types.cost = 成本变量
pio.Attributes.known_attribute_types.base_value = 基本值
pio.Attributes.known_attribute_types.cluster = 簇变量
pio.Attributes.known_attribute_types.weight = 权重变量
pio.Attributes.known_attribute_types.batch = 批量变量

pio.OperatorCategory.source = 数据源
pio.OperatorCategory.processing = 数据处理
pio.OperatorCategory.algorithmModel = 算法建模
pio.OperatorCategory.utility = 工具

pio.OperatorGroup.dataSource = 数据源
pio.OperatorGroup.fieldSetting = 字段设置
pio.OperatorGroup.filtering = 条件过滤
pio.OperatorGroup.sampling = 随机抽样
pio.OperatorGroup.normalization = 标准化
pio.OperatorGroup.aggregation = 汇总统计
pio.OperatorGroup.classification = 分类算法
pio.OperatorGroup.regression = 回归算法
pio.OperatorGroup.clustering = 聚类算法
pio.OperatorGroup.association = 关联算法
pio.OperatorGroup.deepLearning = 深度学习
pio.OperatorGroup.modelApply = 模型应用
pio.OperatorGroup.modelPerformance = 模型评估
pio.OperatorGroup.fm = FM
pio.OperatorGroup.script = 脚本

#processing operator
pio.PythonScriptingOperator.name=Python
pio.PythonScriptingOperator.description=Python
pio.PythonScriptingOperator.script=Python脚本

pio.DatabaseDataReader.name=读取数据库
pio.DatabaseDataReader.description=读取数据库
pio.DatabaseDataReader.connect.url=数据库连接
pio.DatabaseDataReader.connect.username=用户名
pio.DatabaseDataReader.connect.password=密码
pio.DatabaseDataReader.tables=表名
pio.DatabaseDataReader.query=查询语句

pio.SingleViewExampleSource.name=读取单图
pio.SingleViewExampleSource.description=读取单图
pio.SingleViewExampleSource.url=数据源URL
pio.SingleViewExampleSource.data_source=数据源
pio.SingleViewExampleSource.single_view_data_source=单图
pio.SingleViewExampleSource.single_view_limit=各维度最大记录

pio.HttpSqlExampleSource.name=读取SQL
pio.HttpSqlExampleSource.description=读取SQL
pio.HttpSqlExampleSource.url=SQL数据源URL
pio.HttpSqlExampleSource.sql=SQL查询语句

pio.CSVExampleSource.name=读取CSV文件
pio.CSVExampleSource.description=读取CSV文件
pio.CSVExampleSource.csv_file=CSV文件
pio.CSVExampleSource.column_separators=列分隔符
pio.CSVExampleSource.trim_lines=去首尾空行
pio.CSVExampleSource.use_quotes=使用引号
pio.CSVExampleSource.quotes_character=引号字符
pio.CSVExampleSource.escape_character=转义字符
pio.CSVExampleSource.skip_comments = 跳过注释
pio.CSVExampleSource.comment_characters = 注释字符

pio.ScanExampleSource.name=读取Tindex数据
pio.ScanExampleSource.description=读取Tindex数据
pio.ScanExampleSource.url=数据源URL
pio.ScanExampleSource.interval=数据源interval
pio.ScanExampleSource.data_source=数据源
pio.ScanExampleSource.batch_size=batch大小
pio.ScanExampleSource.limit=条数

pio.CSVExampleSetWriter.name=写入CSV文件
pio.CSVExampleSetWriter.description=写入CSV文件
pio.CSVExampleSetWriter.column_separators=列分隔符
pio.CSVExampleSetWriter.quote_nominal_values=是否使用双引号
pio.CSVExampleSetWriter.write_attribute_names=是否添加属性名
pio.CSVExampleSetWriter.format_date=是否格式化日期
pio.CSVExampleSetWriter.append_file=是否使用追加模式

pio.Normalization.name = 标准化
pio.Normalization.description = 标准化
pio.Normalization.method = 选择标准化方法
pio.Normalization.attributes_desc = 选择标准化字段
pio.ZTransformationNormalizationMethod.display_name = Z-score标准化
pio.RangeNormalizationMethod.display_name = 最小—最大标准化
pio.ProportionNormalizationMethod.display_name = 比例标准化
pio.IQRNormalizationMethod.display_name = 四分位范围标准化

pio.PreprocessingOperator.return_preprocessing_model = 预处理模型是否返回
pio.PreprocessingOperator.create_view = 创建视图（数据不会更改）

pio.AttributeSubsetSelector.attribute_filter_type = 属性过滤类型
pio.AttributeSubsetSelector.invert_selection = 反向选择
pio.AttributeSubsetSelector.include_special_attributes = 包含指定属性
pio.AttributeSubsetSelector.condition_names.all = 全部属性
pio.AttributeSubsetSelector.condition_names.single = 单个属性
pio.AttributeSubsetSelector.condition_names.subset = 部分属性
pio.AttributeSubsetSelector.condition_names.regular_expression = 正则表达式
pio.AttributeSubsetSelector.condition_names.value_type = 值类型
pio.AttributeSubsetSelector.condition_names.block_type = 块类型
pio.AttributeSubsetSelector.condition_names.no_missing_values = 没有缺失值
pio.AttributeSubsetSelector.condition_names.numeric_value_filter = 数值过滤

pio.BlockTypeAttributeFilter.block_type = 属性的块类型
pio.BlockTypeAttributeFilter.use_block_type_exception = 使用块类型异常
pio.BlockTypeAttributeFilter.except_block_type = 排除此块类型
pio.NumericValueAttributeFilter.numeric_condition = 数值条件（如：'>= 5'）
pio.RegexpAttributeFilter.regular_expression = 正则表达式
pio.RegexpAttributeFilter.use_except_expression = 使用异常表达式
pio.RegexpAttributeFilter.except_regular_expression = 排除正则表达式
pio.SingleAttributeFilter.attribute = 选择属性
pio.ValueTypeAttributeFilter.value_type = 属性值类型
pio.ValueTypeAttributeFilter.use_value_type_exception = 使用值类型异常
pio.ValueTypeAttributeFilter.except_value_type = 排除此值类型

pio.RangeNormalizationMethod.min = 标准化后的最小值
pio.RangeNormalizationMethod.max = 标准化后的最大值

pio.ModelApplier.name=模型应用
pio.ModelApplier.description=模型应用
pio.ModelApplier.application_parameters=应用参数
pio.ModelApplier.key=参数键
pio.ModelApplier.value=参数值
pio.ModelApplier.create_view=创建视图

pio.AttributeFilter.name=选择维度
pio.AttributeFilter.description=选择维度
pio.AttributeFilter.subset.attributes=请选择建模的维度

pio.ExampleFilter.name=条件过滤
pio.ExampleFilter.description=条件过滤
pio.ExampleFilter.filters_list=过滤条件
pio.ExampleFilter.filters_logic_and=同时满足所有条件

pio.CustomFilter.comparator.numerical.equals = 等于
pio.CustomFilter.comparator.numerical.not_equals = 不等于
pio.CustomFilter.comparator.numerical.less = 小于
pio.CustomFilter.comparator.numerical.less_equals = 小于等于
pio.CustomFilter.comparator.numerical.greater_equals = 大于等于
pio.CustomFilter.comparator.numerical.greater = 大于
pio.CustomFilter.comparator.nominal.equals = 等于
pio.CustomFilter.comparator.nominal.not_equals = 不等于
pio.CustomFilter.comparator.nominal.is_in = 包括
pio.CustomFilter.comparator.nominal.is_not_in = 不包括
pio.CustomFilter.comparator.nominal.contains = 包含
pio.CustomFilter.comparator.nominal.not_contains = 不包含
pio.CustomFilter.comparator.nominal.starts_with = 开头是
pio.CustomFilter.comparator.nominal.ends_with = 结尾是
pio.CustomFilter.comparator.nominal.regex = 正则表达式
pio.CustomFilter.comparator.special.is_missing = 缺失值
pio.CustomFilter.comparator.special.is_not_missing = 不缺失值


pio.ChangeAttributeRole.name=设置目标变量
pio.ChangeAttributeRole.description=设置目标变量
pio.ChangeAttributeRole.attribute_name=选择目标变量字段（仅可选1个字段）
pio.ChangeAttributeRole.target_role=角色
pio.ChangeAttributeRole.set_additional_roles=设置其他角色
pio.ChangeAttributeRole.regular_name=普通变量

#algorithmModel operator
pio.LinearRegression.name=线性回归
pio.LinearRegression.description=线性回归
pio.LinearRegression.feature_selection=特征选择
pio.LinearRegression.min_tolerance=最小似然误差
pio.LinearRegression.eliminate_colinear_features=消除共线特征
pio.LinearRegression.use_bias=使用偏置
pio.LinearRegression.ridge=正则系数
pio.LinearRegression.greedy=贪心算法
pio.LinearRegression.T-Test=T检验

pio.TTestLinearRegressionMethod.alpha = 显著水平&alpha;值
pio.IterativeTTestLinearRegressionMethod.max_iterations = 最大迭代次数
pio.IterativeTTestLinearRegressionMethod.forward_alpha = t检验选择属性的显著水平
pio.IterativeTTestLinearRegressionMethod.backward_alpha = t检验取消选择属性的显著水平

#pio.LogisticRegression.name=逻辑回归
#pio.LogisticRegression.description=逻辑回归
#pio.LogisticRegression.add_intercept= 包含截距
#pio.LogisticRegression.start_population_type=开始群体类型
#pio.LogisticRegression.max_generations=最大迭代
#pio.LogisticRegression.generations_without_improval=没有迭代提升
#pio.LogisticRegression.population_size=群体大小
#pio.LogisticRegression.tournament_fraction=得分
#pio.LogisticRegression.keep_best=确保最优值
#pio.LogisticRegression.mutation_type=变异类型
#pio.LogisticRegression.selection_type=选择类型
#pio.LogisticRegression.crossover_prob=步进概率
#pio.LogisticRegression.show_convergence_plot=分类图
#pio.LogisticRegression.return_model_performance=返回模型评估指标

pio.ParallelDecisionTreeLearner.name=决策树
pio.ParallelDecisionTreeLearner.description=决策树
pio.ParallelDecisionTreeLearner.criterion=选择最佳分割方法
pio.ParallelDecisionTreeLearner.maximal_depth=单棵树最大树状图深度
pio.ParallelDecisionTreeLearner.apply_pruning=剪枝
pio.ParallelDecisionTreeLearner.confidence=置信度（0~1）
pio.ParallelDecisionTreeLearner.apply_prepruning=预剪枝
pio.ParallelDecisionTreeLearner.minimal_gain=最小增益阈值
pio.ParallelDecisionTreeLearner.minimal_leaf_size=叶节点最小个数
pio.ParallelDecisionTreeLearner.minimal_size_for_split=最小分割大小
pio.ParallelDecisionTreeLearner.number_of_prepruning_alternatives=可选的预剪枝数
pio.AbstractParallelTreeLearner.criteria_names_desc.gain_ratio = 增益率
pio.AbstractParallelTreeLearner.criteria_names_desc.information_gain = 信息增益
pio.AbstractParallelTreeLearner.criteria_names_desc.gini_index = 基尼指数
pio.AbstractParallelTreeLearner.criteria_names_desc.accuracy = 精度

pio.ParallelRandomForestLearner.name = 随机森林
pio.ParallelRandomForestLearner.description = 随机森林
pio.ParallelRandomForestLearner.number_of_trees = 森林中树的个数（正整数）
pio.ParallelRandomForestLearner.guess_subset_ratio = 猜测子集比例
pio.ParallelRandomForestLearner.subset_ratio = 随机选择子集的比例
pio.ParallelRandomForestLearner.voting_strategy = 投票策略
pio.ParallelRandomForestLearner.voting_strategy.confidence_vote = 置信度
pio.ParallelRandomForestLearner.voting_strategy.majority_vote = 多数

pio.DecisionTreeLearner.maximal_depth=最大深度
pio.DecisionTreeLearner.confidence=置信度
pio.DecisionTreeLearner.number_of_prepruning_alternatives=预剪枝可选的节点数
pio.DecisionTreeLearner.no_pre_pruning=禁止预剪枝
pio.DecisionTreeLearner.no_pruning=禁止修剪

pio.DistanceMeasures.measure_types = 度量类型
pio.DistanceMeasures.nominal_measure = 标称度量
# pio.DistanceMeasures.numerical_measure = 数值度量
pio.DistanceMeasures.numerical_measure = 距离度量方式
pio.DistanceMeasures.mixed_measure = 混合度量
pio.DistanceMeasures.divergence = 散度
pio.DistanceMeasures.MixedEuclideanDistance = 混合欧氏距离
pio.DistanceMeasures.EuclideanDistance = 欧式距离
pio.DistanceMeasures.CamberraDistance = 堪培拉距离
pio.DistanceMeasures.ChebychevDistance = 切比雪夫距离
pio.DistanceMeasures.CorrelationSimilarity = 相关系数
pio.KMeans.name = K均值
pio.KMeans.description = K均值
pio.KMeans.k = 聚类数 正整数[2,100]
pio.KMeans.max_runs = 最大迭代次数
pio.KMeans.max_optimization_steps = 最大优化次数
pio.KMeanspp.determine_good_start_values = 使用启发式初始质心
pio.RMAbstractClusterer.add_cluster_attribute = 添加聚类变量
pio.RMAbstractClusterer.add_as_label = 添加聚类标签
pio.RMAbstractClusterer.remove_unlabeled = 删除未标记结果集

pio.MyKLRLearner.name = 逻辑回归（SVM）
pio.MyKLRLearner.description = 逻辑回归（SVM）

pio.JMySVMLearner.name = 支持向量机
pio.JMySVMLearner.description = 支持向量机
pio.JMySVMLearner.estimate_performance = 返回性能估计
pio.JMySVMLearner.L_pos = 正例惩罚因子（大于0）
pio.JMySVMLearner.L_neg = 负例惩罚因子（大于0）
pio.JMySVMLearner.epsilon = &epsilon;不敏感损失常数
pio.JMySVMLearner.epsilon_plus = &epsilon;正偏差
pio.JMySVMLearner.epsilon_minus = &epsilon;负偏差
pio.JMySVMLearner.balance_cost = 均衡开销
pio.JMySVMLearner.quadratic_loss_pos = 正偏差使用二次损失
pio.JMySVMLearner.quadratic_loss_neg = 负偏差使用二次损失

pio.AbstractMySVMLearner.kernel_gamma = 核参数gamma（&gamma;）
pio.AbstractMySVMLearner.kernel_sigma1 = 核参数sigma1（&sigma;1）
pio.AbstractMySVMLearner.kernel_sigma2 = 核参数sigma2（&sigma;2）
pio.AbstractMySVMLearner.kernel_sigma3 = 核参数sigma3（&sigma;3）
pio.AbstractMySVMLearner.kernel_shift = 核参数Shift
pio.AbstractMySVMLearner.kernel_degree = 核函数N次方项（N值）
pio.AbstractMySVMLearner.kernel_a = 核参数a
pio.AbstractMySVMLearner.kernel_b = 核参数b
pio.AbstractMySVMLearner.kernel_cache = 训练所需要内存大小（MB）
pio.AbstractMySVMLearner.convergence_epsilon = 最小收敛误差epsilon（&epsilon;）
pio.AbstractMySVMLearner.max_iterations = 最大迭代次数
pio.AbstractMySVMLearner.scale = 缩放
#pio.AbstractMySVMLearner.return_optimization_performance =
pio.AbstractMySVMLearner.C = 规则化参数（C）
pio.AbstractMySVMLearner.calculate_weights = 计算权重
pio.AbstractMySVMLearner.kernel_type = 核函数类型
pio.AbstractMySVMLearner.kernel_type.dot = 线性核
pio.AbstractMySVMLearner.kernel_type.radial = 径向基核
pio.AbstractMySVMLearner.kernel_type.polynomial = 多项式核
pio.AbstractMySVMLearner.kernel_type.neural = 神经网络核
pio.AbstractMySVMLearner.kernel_type.anova = ANOVA核
pio.AbstractMySVMLearner.kernel_type.epachnenikov = epanechnikov核
pio.AbstractMySVMLearner.kernel_type.gaussian_combination = 高斯核
pio.AbstractMySVMLearner.kernel_type.multiquadric = 多元二次核

pio.PolynominalClassificationPerformanceEvaluator.name = 分类评估
pio.PolynominalClassificationPerformanceEvaluator.description = 分类评估
pio.PolynominalClassificationPerformanceEvaluator.class_weights = 类权重
pio.PolynominalClassificationPerformanceEvaluator.class_name = 类名
pio.PolynominalClassificationPerformanceEvaluator.weight = 该类的权重
pio.AbsoluteError.absolute_error = 平均绝对误差(MAD)
pio.RelativeError.relative_error = 相对误差
pio.LenientRelativeError.relative_error_lenient = 平均宽松相对误差
pio.StrictRelativeError.relative_error_strict = 平均严格相对误差
pio.NormalizedAbsoluteError.normalized_absolute_error = 归一化绝对误差
pio.RootMeanSquaredError.root_mean_squared_error = 均方误差(MSE)
pio.RootRelativeSquaredError.root_relative_squared_error = 根相对平方误差
pio.SquaredError.squared_error = 平方误差
pio.CorrelationCriterion.correlation = 相关性
pio.SquaredCorrelationCriterion.squared_correlation = 平方相关性
pio.CrossEntropy.cross_entropy = 交叉熵
pio.Margin.margin = 分类器边缘
pio.SoftMarginLoss.soft_margin_loss = 平均软边缘损耗
pio.LogisticLoss.logistic_loss = 逻辑损耗
pio.MultiClassificationPerformance.name1 = 精度
pio.MultiClassificationPerformance.name2 = 分类误差
pio.MultiClassificationPerformance.name3 = &kappa;
pio.MultiClassificationPerformance.description1 = 正确分类样本的相对数量
pio.MultiClassificationPerformance.description2 = 错误分类样本的相对数量
pio.MultiClassificationPerformance.description3 = 分类的&kappa;统计
pio.WeightedMultiClassPerformance.name1 = 加权平均召回
pio.WeightedMultiClassPerformance.name2 = 加权平均精度
pio.WeightedMultiClassPerformance.description1 = 每类召回的加权平均数
pio.WeightedMultiClassPerformance.description2 = 每类精度的加权平均数
pio.RankCorrelation.description1 = 实际和预测标签之间的等级相关性（Spearman's rho）
pio.RankCorrelation.description2 = 实际和预测标签之间的等级相关性（Kendall's tau-b）

pio.RegressionPerformanceEvaluator.name = 回归评估
pio.RegressionPerformanceEvaluator.description = 回归评估
pio.PredictionAverage.prediction_average = 平均预测

pio.BinominalClassificationPerformanceEvaluator.name = 二项分类评估
pio.BinominalClassificationPerformanceEvaluator.description = 二项分类评估

pio.AbstractPerformanceEvaluator.main_criterion = 主要标准
pio.AbstractPerformanceEvaluator.skip_undefined_labels = 跳过未定义的标签
pio.AbstractPerformanceEvaluator.comparator_class = 比较器全类名
pio.AbstractPerformanceEvaluator.use_example_weights = 使用实例权重

pio.FPGrowth.name = FP-Growth
pio.FPGrowth.description = FP-Growth
pio.FPGrowth.find_min_number_of_itemsets = 查找最小数量项集
pio.FPGrowth.min_number_of_itemsets = 最小数量项集
pio.FPGrowth.max_number_of_retries = 最大重试次数
pio.FPGrowth.positive_value = 正值
pio.FPGrowth.min_support = 最小支持度（介于0~1之间）
pio.FPGrowth.max_items = 最大前项数 正整数
pio.FPGrowth.must_contain = 生成的规则必须包含为正则表达式
pio.FPGrowth.keep_example_set = 保留样本集

pio.AssociationRuleGenerator.name = 创建关联规则
pio.AssociationRuleGenerator.description = 创建关联规则
pio.AssociationRuleGenerator.criterion = 规则选择准则
pio.AssociationRuleGenerator.min_confidence = 最小规则置信度（0~1）
pio.AssociationRuleGenerator.min_criterion_value = 所选准则最小值
pio.AssociationRuleGenerator.gain_theta = 增益参数&theta;
pio.AssociationRuleGenerator.laplace_k = 拉普拉斯参数&kappa; 正整数
pio.AssociationRuleGenerator.criteria.confidence = 置信度
pio.AssociationRuleGenerator.criteria.lift = lift
pio.AssociationRuleGenerator.criteria.conviction = conviction
pio.AssociationRuleGenerator.criteria.ps = ps
pio.AssociationRuleGenerator.criteria.gain = 增益
pio.AssociationRuleGenerator.criteria.laplace = 拉普拉斯

pio.SamplingOperator.name = 随机抽样
pio.SamplingOperator.description = 随机抽样
pio.SamplingOperator.sample = 样本抽取方式
pio.SamplingOperator.sample_size = 样本大小
pio.SamplingOperator.sample_ratio = 样本比例
pio.SamplingOperator.sample_probability = 样本概率
pio.SamplingOperator.balance_data = 平衡数据
pio.SamplingOperator.sample_size_per_class = 每类绝对大小
pio.SamplingOperator.sample_ratio_per_class = 每类比例
pio.SamplingOperator.sample_probability_per_class = 每类概率
pio.SamplingOperator.class = 类名
pio.SamplingOperator.size = 数量
pio.SamplingOperator.ratio = 比例
pio.SamplingOperator.probability = 概率
pio.SamplingOperator.sample_modes.absolute = 按样本数量
pio.SamplingOperator.sample_modes.relative = 按百分比
pio.SamplingOperator.sample_modes.probability = 按概率

pio.AggregationOperator.name = 汇总统计
pio.AggregationOperator.description = 汇总统计
pio.AggregationOperator.use_default_aggregation = 使用默认的聚合函数
pio.AggregationOperator.default_aggregation_function = 默认的聚合函数
pio.AggregationOperator.aggregation_attributes = 聚合属性
pio.AggregationOperator.aggregation_functions = 聚合函数
pio.AggregationOperator.group_by_attributes = 分组属性
pio.AggregationOperator.only_distinct = 仅使用不同值的行
pio.AggregationOperator.ignore_missings = 忽略缺失值
pio.AggregationOperator.count_all_combinations = 计算所有组合
pio.AggregationOperator.attributes_desc = 请选择汇总统计的字段

pio.NumericToBinominal.name = 数值转二分类变量
pio.NumericToBinominal.description = 数值转二分类变量
pio.NumericToBinominal.min = 映射到false的最小值
pio.NumericToBinominal.max = 映射到false的最大值
pio.NumericToBinominal.attributes_desc = 选择数值转二分类字段
pio.NumericToPolynominal.name = 数值转多分类变量
pio.NumericToPolynominal.description = 数值转多分类变量
pio.NumericToPolynominal.attributes_desc = 选择数值转多分类字段

pio.Encoding.encoding = 文件编码

pio.RandomGenerator.use_local_random_seed = 使用本地随机种子
pio.RandomGenerator.local_random_seed = 初始随机种子 正整数

pio.FieldAwareFactorizationMachine.name = FFM
pio.FieldAwareFactorizationMachine.description = FFM
pio.FieldAwareFactorizationMachine.iterations = 最大迭代次数
pio.FieldAwareFactorizationMachine.learning_rate = 学习率
pio.FieldAwareFactorizationMachine.l2_regularization = L2正则化权值
pio.FieldAwareFactorizationMachine.normalization = 是否标准化
pio.FieldAwareFactorizationMachine.random_samples = 是否随机化样本顺序
pio.FieldAwareFactorizationMachine.latent_factor_dim = 隐向量维数

pio.ClusterModel.items = 类“Cluster_{0}”包含 {1} 个项
pio.ClusterModel.total_items = 总项数为：{0} 个